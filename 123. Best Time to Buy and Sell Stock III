class Solution:
    def maxProfit(self, prices):  
        # DP + State Machine
        # Reference: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/discuss/149383/Easy-DP-solution-using-state-machine-O(n)-time-complexity-O(1)-space-complexity
        
        if len(prices) in [0, 1]:
            return 0
        
        intMin = - float('inf')
        
        s1, s2, s3, s4 = -prices[0], intMin, intMin, intMin
        
        for i in range(1, len(prices)):
            s1 = max(s1, -prices[i])
            s2 = max(s2, s1 + prices[i])
            s3 = max(s3, s2 - prices[i])
            s4 = max(s4, s3 + prices[i])
        
        return max(0, s4)
        """
        Memory Limit Exceeded Solution
        N = len(prices)
        value = []
        for i in range(N):
            value.append([])
            for j in range(N+1):
                value[i].append([])
                for k in range(3):
                    value[i][j].append(0)

        ans = 0

        for i in range(N-1):
            # Purchase
            value[i+1][i+1][2] = value[i][N][2]
            value[i+1][i+1][1] = value[i][N][1]

            # Hold Empty
            value[i+1][N][1] = value[i][N][1]
            value[i+1][N][0] = value[i][N][0]

            for j in range(i+1):
                if prices[i+1] > prices[j]:  # Sale
                    value[i+1][N][1] = max(value[i+1][N][1], value[j][N][2] + prices[i+1] - prices[j])
                    value[i+1][N][0] = max(value[i+1][N][0], value[j][N][1] + prices[i+1] - prices[j])
                    ans = max(ans, value[i+1][N][1], value[i+1][N][0])
                else:                        # Hold
                    value[i+1][j][2] = value[i][j][2]
                    value[i+1][j][1] = value[i][j][1]
                    value[i+1][N][2] = max(value[i+1][N][2], value[j][N][2])
                    value[i+1][N][1] = max(value[i+1][N][1], value[j][N][1])

        return ans
        :type prices: List[int]
        :rtype: int
        """
        
