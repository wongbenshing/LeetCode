class Solution:
    def trap(self, height: List[int]) -> int:
        n = len(height)
        if n < 2: return 0
        
        res = 0
        left_max, right_max = [0 for _ in range(n)], [0 for _ in range(n)]
        
        left_max[0] = height[0]
        for i in range(1, n):
            left_max[i] = max(height[i], left_max[i-1])
        right_max[n-1] = height[n-1]
        for i in range(n-2, -1, -1):
            right_max[i] = max(height[i], right_max[i+1])
        
        for i in range(n):
            res += min(left_max[i], right_max[i]) - height[i]
        
        return res



"""
The Following is the code for bruce force (Time: O(N^2), Space: O(N))

class Solution:
    def trap(self, height: List[int]) -> int:
        dic = {}
        h = set()
        
        if len(height) < 2: return 0
        
        for i, bar in enumerate(height):
            # Ignore the 0
            if bar == 0: continue
            # Dictionary
            if bar in dic:
                dic[bar].append(i)
            else:
                dic[bar] = [i]
            # Heap (set)
            h.add(-bar)
        
        # Heap set to list
        h = list(h)
        heapq.heapify(h)

        res = 0
        
        # Do it from high to low
        while h:
            cur_height = -heapq.heappop(h)
            temp = 0
            for i in range(len(dic[cur_height])-1):
                temp += dic[cur_height][i+1]-dic[cur_height][i]-1
            if h:
                dic[-h[0]] = sorted(dic[-h[0]] + dic[cur_height])
                res += temp * (cur_height + h[0])
            else:
                res += temp * cur_height
        
        return res
        


"""
