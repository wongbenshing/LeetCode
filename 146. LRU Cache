class LRUCache:

    def __init__(self, capacity: 'int'):
        self.n = capacity
        self.dic = collections.OrderedDict()

    def get(self, key: 'int') -> 'int':
        if key in self.dic:
            value = self.dic[key]
            self.dic.pop(key)
            self.dic[key] = value
            return value
        else:
            return -1

    def put(self, key: 'int', value: 'int') -> 'None':
        if key in self.dic:
            self.dic.pop(key)
            self.dic[key] = value
        elif self.n > 0:
            self.dic[key] = value
            self.n -= 1
        else:
            self.dic.popitem(last=False)
            self.dic[key] = value
            
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
